generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String        @id @default(cuid())
  email               String        @unique
  username            String        @unique
  passwordHash        String        @map("password")
  firstName           String?
  lastName            String?
  avatar              String?
  bio                 String?
  walletAddress       String?
  
  // Enhanced role system
  role                String        @default("USER") // USER, MODERATOR, ADMIN
  
  // Authentication status fields
  isActive            Boolean       @default(true)
  isSuspended         Boolean       @default(false)
  isVerified          Boolean       @default(false)
  isAdmin             Boolean       @default(false)
  
  // Email verification
  verificationToken   String?
  verificationExpires DateTime?
  
  // Two-factor authentication
  twoFactorEnabled    Boolean       @default(false)
  twoFactorSecret     String?
  twoFactorBackupCodes String[]     @default([])
  
  // Password reset
  resetToken          String?
  resetTokenExpires   DateTime?
  
  // Security fields
  failedLoginAttempts Int           @default(0)
  lockedUntil         DateTime?
  passwordChangedAt   DateTime?
  
  // Timestamps
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  lastLoginAt         DateTime?
  
  // Relations
  auctions            Auction[]
  bids                Bid[]
  collections         Collection[]
  nfts                NFT[]
  transactions        Transaction[]
  sessions            UserSession[]

  @@map("users")
}

model UserSession {
  id             String   @id @default(cuid())
  userId         String
  refreshToken   String?
  userAgent      String?
  ipAddress      String?
  expiresAt      DateTime
  lastActivityAt DateTime @default(now())
  createdAt      DateTime @default(now())
  
  // Relations
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_sessions")
}

model NFT {
  id              String        @id @default(cuid())
  name            String
  description     String?
  image           String
  tokenId         String        @unique
  contractAddress String
  price           Float?
  currency        String        @default("ETH")
  category        String
  rarity          String        @default("Common")
  isListed        Boolean       @default(false)
  isSold          Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  creatorId       String
  collectionId    String?
  auctions        Auction?
  bids            Bid[]
  collection      Collection?   @relation(fields: [collectionId], references: [id])
  creator         User          @relation(fields: [creatorId], references: [id])
  transactions    Transaction[]

  @@map("nfts")
}

model Collection {
  id          String   @id @default(cuid())
  name        String
  description String?
  image       String?
  banner      String?
  slug        String   @unique
  isVerified  Boolean  @default(false)
  floorPrice  Float?
  totalVolume Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creatorId   String
  creator     User     @relation(fields: [creatorId], references: [id])
  nfts        NFT[]

  @@map("collections")
}

model Transaction {
  id          String   @id @default(cuid())
  amount      Float
  currency    String   @default("ETH")
  createdAt   DateTime @default(now())
  description String?
  nftId       String?
  txHash      String?
  updatedAt   DateTime @updatedAt
  userId      String
  type        String
  status      String   @default("pending")
  nft         NFT?     @relation(fields: [nftId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model Auction {
  id           String   @id @default(cuid())
  startPrice   Float
  currentPrice Float?
  reservePrice Float?
  startTime    DateTime
  endTime      DateTime
  isActive     Boolean  @default(true)
  isEnded      Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  nftId        String   @unique
  sellerId     String
  nft          NFT      @relation(fields: [nftId], references: [id])
  seller       User     @relation(fields: [sellerId], references: [id])
  bids         Bid[]

  @@map("auctions")
}

model Bid {
  id        String   @id @default(cuid())
  amount    Float
  isWinning Boolean  @default(false)
  createdAt DateTime @default(now())
  auctionId String
  bidderId  String
  nftId     String
  auction   Auction  @relation(fields: [auctionId], references: [id])
  bidder    User     @relation(fields: [bidderId], references: [id])
  nft       NFT      @relation(fields: [nftId], references: [id])

  @@map("bids")
}

model AdminLog {
  id        String   @id @default(cuid())
  action    String
  details   String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("admin_logs")
}

model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}
